// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Peer struct {
	PrivIp               string   `protobuf:"bytes,1,opt,name=priv_ip,json=privIp,proto3" json:"priv_ip,omitempty"`
	PubIp                string   `protobuf:"bytes,2,opt,name=pub_ip,json=pubIp,proto3" json:"pub_ip,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Friend               string   `protobuf:"bytes,4,opt,name=friend,proto3" json:"friend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetPrivIp() string {
	if m != nil {
		return m.PrivIp
	}
	return ""
}

func (m *Peer) GetPubIp() string {
	if m != nil {
		return m.PubIp
	}
	return ""
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetFriend() string {
	if m != nil {
		return m.Friend
	}
	return ""
}

type NodeList struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeList) Reset()         { *m = NodeList{} }
func (m *NodeList) String() string { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()    {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeList.Unmarshal(m, b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeList.Marshal(b, m, deterministic)
}
func (m *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(m, src)
}
func (m *NodeList) XXX_Size() int {
	return xxx_messageInfo_NodeList.Size(m)
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Response struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{3}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Node struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	NotifyOthers         int32    `protobuf:"varint,2,opt,name=notify_others,json=notifyOthers,proto3" json:"notify_others,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Node) GetNotifyOthers() int32 {
	if m != nil {
		return m.NotifyOthers
	}
	return 0
}

func init() {
	proto.RegisterType((*Peer)(nil), "node.Peer")
	proto.RegisterType((*NodeList)(nil), "node.NodeList")
	proto.RegisterType((*Response)(nil), "node.Response")
	proto.RegisterType((*Request)(nil), "node.Request")
	proto.RegisterType((*Node)(nil), "node.Node")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0x65, 0x61, 0x59, 0x60, 0xf8, 0x30, 0x99, 0x44, 0xdd, 0x70, 0x22, 0xf5, 0x42, 0x22, 0xe1,
	0x80, 0x47, 0x4f, 0x7e, 0xc4, 0x64, 0x13, 0xa2, 0xa4, 0xf1, 0x4e, 0x76, 0xd9, 0x41, 0x37, 0x81,
	0xb6, 0xb6, 0x5d, 0x8c, 0xfe, 0x0a, 0x7f, 0xb2, 0x69, 0x17, 0x22, 0x07, 0x8d, 0xb7, 0x99, 0x37,
	0x6f, 0xde, 0xbc, 0x99, 0x16, 0x40, 0xc8, 0x9c, 0xa6, 0x4a, 0x4b, 0x2b, 0x31, 0x74, 0x31, 0xcb,
	0x20, 0x5c, 0x10, 0x69, 0x3c, 0x87, 0x96, 0xd2, 0xc5, 0x6e, 0x59, 0xa8, 0x38, 0x18, 0x05, 0xe3,
	0x0e, 0x8f, 0x5c, 0x9a, 0x28, 0x3c, 0x85, 0x48, 0x95, 0x99, 0xc3, 0xeb, 0x1e, 0x6f, 0xaa, 0x32,
	0x4b, 0x14, 0x22, 0x84, 0x22, 0xdd, 0x52, 0xdc, 0xf0, 0xa0, 0x8f, 0xf1, 0x0c, 0xa2, 0xb5, 0x2e,
	0x48, 0xe4, 0x71, 0x58, 0x49, 0x54, 0x19, 0x9b, 0x40, 0xfb, 0x51, 0xe6, 0x34, 0x2f, 0x8c, 0xc5,
	0x11, 0x34, 0xdd, 0x5c, 0x13, 0x07, 0xa3, 0xc6, 0xb8, 0x3b, 0x83, 0xa9, 0x77, 0xe4, 0xca, 0xbc,
	0x2a, 0x30, 0x06, 0x6d, 0x4e, 0x46, 0x49, 0x61, 0xbc, 0xa2, 0xb1, 0xa9, 0x2d, 0xcd, 0xc1, 0x54,
	0x95, 0xb1, 0x0e, 0xb4, 0x38, 0xbd, 0x95, 0x64, 0x2c, 0xbb, 0x86, 0xd0, 0x75, 0xe3, 0x00, 0xea,
	0xc9, 0x62, 0x4f, 0xab, 0x27, 0x0b, 0xbc, 0x80, 0xbe, 0x90, 0xb6, 0x58, 0x7f, 0x2c, 0xa5, 0x7d,
	0x25, 0x6d, 0xbc, 0xfd, 0x26, 0xef, 0x55, 0xe0, 0x93, 0xc7, 0x66, 0x1b, 0xe8, 0xcd, 0x65, 0x9a,
	0xdf, 0xa6, 0x9b, 0x54, 0xac, 0x48, 0xe3, 0x04, 0x7a, 0x9c, 0x5e, 0x0a, 0x63, 0x49, 0x7b, 0xd1,
	0x23, 0x7b, 0xc3, 0xc1, 0x4f, 0xec, 0x36, 0x61, 0x35, 0x9c, 0xc2, 0xc9, 0x9d, 0x14, 0x82, 0x56,
	0xf6, 0x59, 0x3e, 0xf8, 0x55, 0xb1, 0x5f, 0x91, 0xf6, 0xe6, 0x86, 0x47, 0xfd, 0xac, 0x36, 0xfb,
	0x0a, 0x00, 0x38, 0x89, 0x9c, 0x3e, 0x77, 0xb2, 0x34, 0x38, 0xae, 0xce, 0x72, 0x2f, 0xdf, 0xc5,
	0x6f, 0x83, 0x0e, 0x47, 0x60, 0x35, 0xbc, 0x84, 0xae, 0x7b, 0xa4, 0x1b, 0xad, 0x8b, 0x5d, 0xba,
	0x39, 0x90, 0x1d, 0xf4, 0x37, 0x99, 0xd3, 0x56, 0xfe, 0x4b, 0xce, 0x22, 0xff, 0x17, 0xae, 0xbe,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x2d, 0xcb, 0x46, 0x19, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerClient is the client API for LoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerClient interface {
	RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeList, error)
	ConnectToFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Node, error)
}

type loadBalancerClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerClient(cc *grpc.ClientConn) LoadBalancerClient {
	return &loadBalancerClient{cc}
}

func (c *loadBalancerClient) RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/node.LoadBalancer/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerClient) ConnectToFriend(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/node.LoadBalancer/ConnectToFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerServer is the server API for LoadBalancer service.
type LoadBalancerServer interface {
	RegisterNode(context.Context, *Node) (*NodeList, error)
	ConnectToFriend(context.Context, *Request) (*Node, error)
}

func RegisterLoadBalancerServer(s *grpc.Server, srv LoadBalancerServer) {
	s.RegisterService(&_LoadBalancer_serviceDesc, srv)
}

func _LoadBalancer_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.LoadBalancer/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).RegisterNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancer_ConnectToFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).ConnectToFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.LoadBalancer/ConnectToFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).ConnectToFriend(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.LoadBalancer",
	HandlerType: (*LoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _LoadBalancer_RegisterNode_Handler,
		},
		{
			MethodName: "ConnectToFriend",
			Handler:    _LoadBalancer_ConnectToFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// RendezvousClient is the client API for Rendezvous service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RendezvousClient interface {
	NodeDown(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error)
	PeerArrival(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Response, error)
	PeerRemoval(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Response, error)
}

type rendezvousClient struct {
	cc *grpc.ClientConn
}

func NewRendezvousClient(cc *grpc.ClientConn) RendezvousClient {
	return &rendezvousClient{cc}
}

func (c *rendezvousClient) NodeDown(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/node.Rendezvous/NodeDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendezvousClient) PeerArrival(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/node.Rendezvous/PeerArrival", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendezvousClient) PeerRemoval(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/node.Rendezvous/PeerRemoval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RendezvousServer is the server API for Rendezvous service.
type RendezvousServer interface {
	NodeDown(context.Context, *Node) (*Response, error)
	PeerArrival(context.Context, *Peer) (*Response, error)
	PeerRemoval(context.Context, *Peer) (*Response, error)
}

func RegisterRendezvousServer(s *grpc.Server, srv RendezvousServer) {
	s.RegisterService(&_Rendezvous_serviceDesc, srv)
}

func _Rendezvous_NodeDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendezvousServer).NodeDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Rendezvous/NodeDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendezvousServer).NodeDown(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rendezvous_PeerArrival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendezvousServer).PeerArrival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Rendezvous/PeerArrival",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendezvousServer).PeerArrival(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rendezvous_PeerRemoval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendezvousServer).PeerRemoval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Rendezvous/PeerRemoval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendezvousServer).PeerRemoval(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rendezvous_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Rendezvous",
	HandlerType: (*RendezvousServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeDown",
			Handler:    _Rendezvous_NodeDown_Handler,
		},
		{
			MethodName: "PeerArrival",
			Handler:    _Rendezvous_PeerArrival_Handler,
		},
		{
			MethodName: "PeerRemoval",
			Handler:    _Rendezvous_PeerRemoval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
